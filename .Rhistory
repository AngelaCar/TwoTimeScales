to_plot <- hazard_SE$loghazard
} else {
if(opts$log10hazard){
to_plot <- hazard_SE$log10hazard
} else {
to_plot <- hazard_SE$hazard
}
}
}
if (which_plot == "SE") {
if (opts$loghazard == TRUE) {
to_plot <- hazard_SE$SE_loghazard
} else {
if(opts$log10hazard){
to_plot <- hazard_SE$SE_log10hazard
} else {
to_plot <- hazard_SE$SE_hazard
}
}
}
if (is.null(opts$tmax)) {
opts$tmax <- new_grid$umax + new_grid$smax
}
grid_us <- expand.grid(u = new_grid$intu, s = new_grid$ints)
grid_us$t <- grid_us$u + grid_us$s
grid_us$to_plot <- as.vector(to_plot)
View(grid_us)
new_grid
devtools::load_all(".")
onlyslic <- subset(grid_us, s %in% where_slices)
grid_ts <- expand.grid(s = where_slices, t = unique(sort(onlyslic$t)))
final_grid <- merge(grid_ts, onlyslic, all.x = T)
to_plot_v <- final_grid$to_plot
dim(to_plot_v) <- c(length(unique(sort(final_grid$t))), length(where_slices))
to_plot <- to_plot_v
X1 <- unique(sort(final_grid$t))
View(onlyslic)
if (direction == "u") x <- new_grid$ints else x <- X1
plt <- plot_slices(
x = x,
y = to_plot,
direction = direction,
plot_options = list(
loghazard = opts$loghazard,
log10hazard = opts$log10hazard,
col_palette = opts$col_palette,
n_shades = opts$n_shades,
main = opts$main,
xlab = opts$xlab,
ylab = opts$ylab,
xlim = opts$xlim,
ylim = opts$ylim,
cex_main = opts$cex_main,
cex_lab = opts$cex_lab,
lwd = opts$lwd
)
)
devtools::load_all(".")
covs <- subset(reccolon2ts, select = c("rx", "sex", "adhere", "obstruct", "node4"))
dt2ts_cov <- prepare_data(u = reccolon2ts$timer,
s_out = reccolon2ts$timesr,
events = reccolon2ts$status,
ds = 30,
individual = TRUE,
covs = covs)
mod_cov <- fit2ts(data2ts = dt2ts_cov,
Bbases_spec = list(bdeg = 3,
nseg_s = 20,
min_s = 0,
max_s = 2730,
nseg_u = 20,
min_u = 0,
max_u = 2300),
pord = 2,
optim_method = "LMMsolver",
optim_criterion = "aic")
plot(mod_cov,plot_grid = list(c(umin=0, umax=2300, du=50),
c(umin=0, umax=2730, du=50)),
which_plot = "slices",
where_slices = c(30, 60, 90, 180, 365, 1000, 2000),
direction = "u",
plot_options = list(main = "Slices of the hazard",
xlab = "Time since recurrence",
ylab = "Hazard"))
plot(mod_cov,
plot_grid = list(c(umin=0, umax=2300, du=50),
c(umin=0, umax=2730, du=50)),
which_plot = "slices",
where_slices = c(30, 60, 90, 180, 365, 1000, 2000),
direction = "s",
plot_options = list(main = "Slices of the hazard",
xlab = "Time since randomization",
ylab = "Hazard"))
devtools::load_all(".")
plot(mod_cov,
plot_grid = list(c(umin=0, umax=2300, du=50),
c(umin=0, umax=2730, du=50)),
which_plot = "slices",
where_slices = c(30, 60, 90, 180, 365, 1000, 2000),
direction = "s",
plot_options = list(main = "Slices of the hazard",
xlab = "Time since randomization",
ylab = "Hazard"))
plot(mod_cov,
plot_grid = list(c(umin=0, umax=2300, du=50),
c(umin=0, umax=2730, du=50)),
which_plot = "slices",
where_slices = c(30, 60, 90, 180, 365, 1000, 2000),
direction = "u",
plot_options = list(main = "Slices of the hazard",
xlab = "Time since recurrence",
ylab = "Hazard"))
legend("topright",
legend = c(30, 60, 90, 180, 365, 1000, 2000),
lty = 1,
col = grDevices::gray.colors(7))
devtools::load_all(".")
plot(mod_cov,
plot_grid = list(c(umin=0, umax=2300, du=50),
c(umin=0, umax=2730, du=50)),
which_plot = "slices",
where_slices = c(30, 60, 90, 180, 365, 1000, 2000),
direction = "s",
plot_options = list(main = "Slices of the hazard",
xlab = "Time since randomization",
ylab = "Hazard"))
hazard_SE <- get_hazard_2d(fitted_model = x,
plot_grid = plot_grid,
where_slices = where_slices,
direction = direction,
tmax = opts$tmax
)
x = mod_cov
plot_grid = list(c(umin=0, umax=2300, du=50),
c(umin=0, umax=2730, du=50))
where_slices = c(30, 60, 90, 180, 365, 1000, 2000)
direction = "s"
hazard_SE <- get_hazard_2d_LMM(fitted_model = x,
where_slices = where_slices,
direction = direction,
plot_grid = plot_grid,
tmax = opts$tmax
)
hazard_SE <- get_hazard_2d_LMM(fitted_model = x,
where_slices = where_slices,
direction = direction,
plot_grid = plot_grid#,
#tmax = opts$tmax
)
View(hazard_SE)
umin <- plot_grid[[1]][1]
umax <- plot_grid[[1]][2]
du <- plot_grid[[1]][3]
smin <- plot_grid[[2]][1]
smax <- plot_grid[[2]][2]
ds <- plot_grid[[2]][3]
if (du <= 0) stop("`du` should be a positive number!")
if (ds <= 0) stop("`ds` should be a positive number!")
if (umin < attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmin) {
umin <- attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmin
warning("`umin` is smaller than the lower limit of the domain of Bu. Left boundary adjusted to  =  ",
attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmin)
}
fitted_model <- mod_cov
umin <- plot_grid[[1]][1]
umax <- plot_grid[[1]][2]
du <- plot_grid[[1]][3]
smin <- plot_grid[[2]][1]
smax <- plot_grid[[2]][2]
ds <- plot_grid[[2]][3]
if (du <= 0) stop("`du` should be a positive number!")
if (ds <= 0) stop("`ds` should be a positive number!")
if (umin < attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmin) {
umin <- attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmin
warning("`umin` is smaller than the lower limit of the domain of Bu. Left boundary adjusted to  =  ",
attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmin)
}
if (umax > attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmax) {
umax <- attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmax
warning("`umax` is larger than the upper limit of the domain of Bu. Right boundary adjusted to  =  ",
attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmax)
}
K <- ceiling((umax - umin) / du)
intu <- seq(umin, umin + K * du, by = du)
if (smin < attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$xmin) {
smin <- attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$xmin
warning("`smin` is smaller than the lower limit of the domain of Bs. Left boundary adjusted to  =  ",
attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$xmin)
}
if (smax > attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$xmax) {
smax <- attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$xmax
warning("`smax` is larger than the upper limit of the domain of Bs. Right boundary adjusted to  =  ",
attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$xmax)
}
K <- ceiling((smax - smin) / ds)
ints <- seq(smin, smin + K * ds, by = ds)
new_grid <- list(
"intu" = intu,
"umin" = umin,
"umax" = umax,
"du" = du,
"ints" = ints,
"smin" = smin,
"smax" = smax,
"ds" = ds
)
direction == "s"
min(where_slices) < attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$xmin |
max(where_slices) > attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$xmax
news <- unique(sort(c(new_grid$ints, where_slices)))
new_grid$ints <- news
grid_us <- expand.grid(u = new_grid$intu, s = new_grid$ints)
grid_us$t <- with(grid_us, u + s)
t <- unique(grid_us$t)
t
new_grid$intt <- t
grid_ts <- expand.grid(t = new_grid$intt, s = new_grid$ints)
grid_ts$u <- grid_ts$t - grid_ts$s
grid_ts$u
newu <- unique(grid_ts$u)
newu
newu <- newu[newu >= new_grid$umin & newu <= new_grid$umax]
newu
new_grid$umin
new_grid$intu <- sort(newu)
new_grid$intu
devtools::load_all(".")
plot(mod_cov,
plot_grid = list(c(umin=0, umax=2300, du=50),
c(umin=0, umax=2730, du=50)),
which_plot = "slices",
where_slices = c(30, 60, 90, 180, 365, 1000, 2000),
direction = "s",
plot_options = list(main = "Slices of the hazard",
xlab = "Time since randomization",
ylab = "Hazard"))
attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])
devtools::load_all(".")
plot(mod_cov,
# plot_grid = list(c(umin=0, umax=2300, du=50),
#                  c(umin=0, umax=2730, du=50)),
plot_options = list(
rectangular_grid = T,               # for grid of rectangles
original = T,                       # for plot in (t,s)-plane
main = "Original plane - rectangular grid",
xlab = "Time since randomization",
ylab = "Time since recurrence"
))
plot(mod_cov,
plot_grid = list(c(umin=0, umax=2300, du=10),
c(umin=0, umax=2730, du=10)),
plot_options = list(
rectangular_grid = F,                # for grid of parallelograms
original = T,                        # for plot in (t,s)-plane
main = "Original plane - grid of parallelograms",
xlab = "Time since randomization",
ylab = "Time since recurrence"
))
plot(mod_cov,
plot_grid = list(c(umin=0, umax=2300, du=50),
c(umin=0, umax=2730, du=50)),
plot_options = list(
rectangular_grid = T,               # for grid of rectangles
original = T,                       # for plot in (t,s)-plane
main = "Original plane - rectangular grid",
xlab = "Time since randomization",
ylab = "Time since recurrence"
))
plot(mod_cov,
# plot_grid = list(c(umin=0, umax=2300, du=50),
#                  c(umin=0, umax=2730, du=50)),
plot_options = list(
rectangular_grid = T,               # for grid of rectangles
original = T,                       # for plot in (t,s)-plane
main = "Original plane - rectangular grid",
xlab = "Time since randomization",
ylab = "Time since recurrence"
))
devtools::load_all(".")
plot(mod_cov,
# plot_grid = list(c(umin=0, umax=2300, du=50),
#                  c(umin=0, umax=2730, du=50)),
plot_options = list(
rectangular_grid = T,               # for grid of rectangles
original = T,                       # for plot in (t,s)-plane
main = "Original plane - rectangular grid",
xlab = "Time since randomization",
ylab = "Time since recurrence"
))
du <- attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$dx
ds <- attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$dx
umin <- attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmin
umax <- attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmax
smin <- attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$xmin
smax <- attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$xmax
plot_grid <- list(
c("umin" = umin, "umax" = umax, "du" = du),
c("smin" = smin, "smax" = smax, "ds" = ds)
)
plot_grid
hazard_SE <- get_hazard_2d_LMM(fitted_model = x,
where_slices = where_slices,
direction = direction,
plot_grid = plot_grid,
tmax = opts$tmax
)
# ---- Options for plotting ----
opts <- list(
loghazard = FALSE,
log10hazard = FALSE,
rectangular_grid = TRUE,
cut_extrapolated = TRUE,
original = FALSE,
tmax = NULL,
col_palette = NULL,
n_shades = NULL,
breaks = NULL,
show_legend = TRUE,
main = NULL,
xlab = NULL,
ylab = NULL,
xlim = NULL,
ylim = NULL,
contour_lines = TRUE,
contour_col = NULL,
contour_cex = .8,
contour_nlev = 10,
cex_main = 1.2,
cex_lab = 1,
HR = FALSE,
symmetric_CI = TRUE,
confidence = .95,
col_beta = "blue",
pch = 20,
lwd = 2
)
hazard_SE <- get_hazard_2d_LMM(fitted_model = x,
where_slices = where_slices,
direction = direction,
plot_grid = plot_grid,
tmax = opts$tmax
)
new_grid <- hazard_SE$new_plot_grid
to_plot <- hazard_SE$hazard
opts$tmax <- new_grid$umax + new_grid$smax
opts$tmax
grid_us <- expand.grid(u = new_grid$intu, s = new_grid$ints)
grid_us$t <- grid_us$u + grid_us$s
grid_us$to_plot <- as.vector(to_plot)
t <- unique(grid_us$t)
intt <- t[t <= opts$tmax]
grid_ts <- expand.grid(t = intt, s = new_grid$ints)
plotgrid_ts <- merge(grid_ts, grid_us, all.x = TRUE)
to_plot_v <- plotgrid_ts$to_plot
dim(to_plot_v) <- c(length(new_grid$ints), length(intt))
to_plot <- t(to_plot_v)
X1 <- sort(intt)
X2 <- sort(new_grid$ints)
X1
X2
umin <- plot_grid[[1]][1]
umax <- plot_grid[[1]][2]
du <- plot_grid[[1]][3]
smin <- plot_grid[[2]][1]
smax <- plot_grid[[2]][2]
ds <- plot_grid[[2]][3]
if (du <= 0) stop("`du` should be a positive number!")
if (ds <= 0) stop("`ds` should be a positive number!")
if (umin < attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmin) {
umin <- attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmin
warning("`umin` is smaller than the lower limit of the domain of Bu. Left boundary adjusted to  =  ",
attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmin)
}
if (umax > attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmax) {
umax <- attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmax
warning("`umax` is larger than the upper limit of the domain of Bu. Right boundary adjusted to  =  ",
attributes(fitted_model$optimal_model$splRes[[1]]$knots[[1]])$xmax)
}
K <- ceiling((umax - umin) / du)
intu <- seq(umin, umin + K * du, by = du)
if (smin < attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$xmin) {
smin <- attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$xmin
warning("`smin` is smaller than the lower limit of the domain of Bs. Left boundary adjusted to  =  ",
attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$xmin)
}
if (smax > attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$xmax) {
smax <- attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$xmax
warning("`smax` is larger than the upper limit of the domain of Bs. Right boundary adjusted to  =  ",
attributes(fitted_model$optimal_model$splRes[[1]]$knots[[2]])$xmax)
}
K <- ceiling((smax - smin) / ds)
ints <- seq(smin, smin + K * ds, by = ds)
new_grid <- list(
"intu" = intu,
"umin" = umin,
"umax" = umax,
"du" = du,
"ints" = ints,
"smin" = smin,
"smax" = smax,
"ds" = ds
)
View(new_grid)
new_grid[["intu"]]
grid_us <- expand.grid(u = new_grid$intu, s = new_grid$ints)
grid_us$t <- grid_us$u + grid_us$s
grid_us$to_plot <- as.vector(to_plot)
to_plot <- hazard_SE$hazard
grid_us$to_plot <- as.vector(to_plot)
View(grid_us)
t <- unique(grid_us$t)
intt <- t[t <= opts$tmax]
image(grid_us$t, grid_us$s, grid_us$to_plot)
View(grid_us)
grid_ts <- expand.grid(t = intt, s = new_grid$ints)
grid_ts
plotgrid_ts <- merge(grid_ts, grid_us, all.x = TRUE)
View(plotgrid_ts)
to_plot_v <- plotgrid_ts$to_plot
dim(to_plot_v) <- c(length(new_grid$ints), length(intt))
to_plot <- t(to_plot_v)
intt <- t[t <= opts$tmax]
intt
to_plot_v <- plotgrid_ts$to_plot
grid_ts <- expand.grid(t = intt, s = new_grid$ints)
plotgrid_ts <- merge(grid_ts, grid_us, all.x = TRUE)
to_plot_v <- plotgrid_ts$to_plot
dim(to_plot_v) <- c(length(new_grid$ints), length(intt))
to_plot_v
new_grid <- hazard_SE$new_plot_grid
to_plot <- hazard_SE$hazard
grid_us <- expand.grid(u = new_grid$intu, s = new_grid$ints)
grid_us$t <- grid_us$u + grid_us$s
grid_us$to_plot <- as.vector(to_plot)
t <- unique(grid_us$t)
intt <- t[t <= opts$tmax]
grid_ts <- expand.grid(t = intt, s = new_grid$ints)
plotgrid_ts <- merge(grid_ts, grid_us, all.x = TRUE)
to_plot_v <- plotgrid_ts$to_plot
dim(to_plot_v) <- c(length(new_grid$ints), length(intt))
to_plot <- t(to_plot_v)
X1 <- sort(intt)
X2 <- sort(new_grid$ints)
X1
X2
plt <- imageplot_2ts(
x = X1, y = X2, z = to_plot,
plot_options = list(
loghazard = opts$loghazard,
log10hazard = opts$log10hazard,
original = opts$original,
rectangular_grid = opts$rectangular_grid,
col_palette = opts$col_palette,
n_shades = opts$n_shades,
breaks = opts$breaks,
show_legend = opts$show_legend,
tmax = opts$tmax,
main = opts$main,
xlab = opts$xlab,
ylab = opts$ylab,
xlim = opts$xlim,
ylim = opts$ylim,
contour_lines = opts$contour_lines,
contour_col = opts$contour_col,
contour_cex = opts$contour_cex,
contour_nlev = opts$contour_nlev,
cex_main = opts$cex_main,
cex_lab = opts$cex_lab
),
...
)
devtools::load_all(".")
plot(mod_cov,
# plot_grid = list(c(umin=0, umax=2300, du=50),
#                  c(umin=0, umax=2730, du=50)),
plot_options = list(
rectangular_grid = T,               # for grid of rectangles
original = T,                       # for plot in (t,s)-plane
main = "Original plane - rectangular grid",
xlab = "Time since randomization",
ylab = "Time since recurrence"
))
plot(mod_cov,
plot_grid = list(c(umin=0, umax=2300, du=50),
c(umin=0, umax=2730, du=50)),
plot_options = list(
rectangular_grid = T,               # for grid of rectangles
original = T,                       # for plot in (t,s)-plane
main = "Original plane - rectangular grid",
xlab = "Time since randomization",
ylab = "Time since recurrence"
))
devtools::check(vignettes = F)
devtools::check(vignettes = F)
devtools::build()
pkgdown::build_site()
ssh -T git@github.com
# Run this once to publish your site regularly
usethis::use_pkgdown_github_pages()
gh_token_help()
rlang::last_trace()
usethis::gh_token_help()
usethis::create_github_token()
# Run once to configure your package to use and deploy pkgdown
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
git config --global --edit
