title = "Time of\n recurrence",
lwd = 2,
bty = "n",
col = mypal(8))
dev.off()
pdf("CumhazCrossSections.pdf", width = 8, height = 6)
par(font.main = 1,
cex.main = 1.8, cex.lab = 1.2,
mar = c(4, 4, 4, 6))
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
which_plot = "cumhaz",
where_slices = c(0.5, 1, 2, 3, 4, 5, 8, 10),
direction = "u",
plot_options = list(col_palette = mypal,
cut_extrapolated = TRUE,
tmax = 18.85,
cumhaz_slices = TRUE,
main = "Cross-sections of the cumulative hazard",
xlab = "Time since recurrence",
ylab = "Cumulative hazard"))
legend(x = 15, y = 1.5,
xpd = T,
inset = c(-0.3,0),
legend = c(0.5, 1, 2, 3, 4, 5, 8, 10),
title = "Time of\n recurrence",
lwd = 2,
bty = "n",
col = mypal(8))
dev.off()
pdf("SEsLogHaz.pdf", width = 6.5, height = 6)
par(font.main = 1,
cex.main = 1.8, cex.lab = 1.2)
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
which_plot = "SE",
plot_options = list(
loghazard = TRUE,
cut_extrapolated = TRUE,
tmax = 18.85,
main = "Standard Errors of the baseline log-hazard",
xlab = "Time of recurrence (years)",
ylab = "Time since recurrence (years)"))
dev.off()
setwd("C:/Cloud/PhD project/Tex files/Paper4")
pdf("CumhazCrossSections.pdf", width = 8, height = 6)
par(font.main = 1,
cex.main = 1.8, cex.lab = 1.2,
mar = c(4, 4, 4, 6))
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
which_plot = "cumhaz",
where_slices = c(0.5, 1, 2, 3, 4, 5, 8, 10),
direction = "u",
plot_options = list(col_palette = mypal,
cut_extrapolated = TRUE,
tmax = 18.85,
cumhaz_slices = TRUE,
main = "Cross-sections of the cumulative hazard",
xlab = "Time since recurrence",
ylab = "Cumulative hazard"))
legend(x = 15, y = 1.4,
xpd = T,
inset = c(-0.3,0),
legend = c(0.5, 1, 2, 3, 4, 5, 8, 10),
title = "Time of\n recurrence",
lwd = 2,
bty = "n",
col = mypal(8))
dev.off()
id <- 1:20
u <- c(5.43, 3.25, 8.15, 5.53, 7.28, 6.61, 5.91, 4.94, 4.25, 3.86, 4.05, 6.86,
4.94, 4.46, 2.14, 7.56, 5.55, 7.60, 6.46, 4.96)
s <- c(0.44, 4.89, 0.92, 1.81, 2.02, 1.55, 3.16, 6.36, 0.66, 2.02, 1.22, 3.96,
7.07, 2.91, 3.38, 2.36, 1.74, 0.06, 5.76, 3.00)
ev <- c(1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1)#'
fakedata <- as.data.frame(cbind(id, u, s, ev))
fakedata2ts <- prepare_data(u = fakedata$u,
s_out = fakedata$s,
ev = fakedata$ev,
ds = .5)
devtools::load_all(".")
id <- 1:20
u <- c(5.43, 3.25, 8.15, 5.53, 7.28, 6.61, 5.91, 4.94, 4.25, 3.86, 4.05, 6.86,
4.94, 4.46, 2.14, 7.56, 5.55, 7.60, 6.46, 4.96)
s <- c(0.44, 4.89, 0.92, 1.81, 2.02, 1.55, 3.16, 6.36, 0.66, 2.02, 1.22, 3.96,
7.07, 2.91, 3.38, 2.36, 1.74, 0.06, 5.76, 3.00)
ev <- c(1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1)#'
fakedata <- as.data.frame(cbind(id, u, s, ev))
fakedata2ts <- prepare_data(u = fakedata$u,
s_out = fakedata$s,
ev = fakedata$ev,
ds = .5)
# Fit a fake model - not optimal smoothing
fakemod <- fit2ts(fakedata2ts,
optim_method = "grid_search",
lrho = list(seq(1 ,1.5 ,.5),
seq(1 ,1.5 ,.5)))
# plot the hazard surface
plot(fakemod)
plot(fakemod,
which_plot = "survival")
plot(fakemod,
which_plot = "survival",
plot_options = list(
original = TRUE
))
plot(fakemod,
which_plot = "survival",
where_slices = c(2, 4, 6, 8)
plot_options = list(
plot(fakemod,
which_plot = "survival",
where_slices = c(2, 4, 6, 8),
plot_options = list(
surv_slices = TRUE
))
plot(fakemod,
which_plot = "survival",
where_slices = c(4, 6, 8),
plot_options = list(
surv_slices = TRUE
))
plot(fakemod,
which_plot = "survival",
direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
surv_slices = TRUE
))
devtools::run_examples()
devtools::run_examples()
<<<<<<< HEAD
devtools::load_all(".")
id <- 1:20
u <- c(5.43, 3.25, 8.15, 5.53, 7.28, 6.61, 5.91, 4.94, 4.25, 3.86, 4.05, 6.86,
4.94, 4.46, 2.14, 7.56, 5.55, 7.60, 6.46, 4.96)
s <- c(0.44, 4.89, 0.92, 1.81, 2.02, 1.55, 3.16, 6.36, 0.66, 2.02, 1.22, 3.96,
7.07, 2.91, 3.38, 2.36, 1.74, 0.06, 5.76, 3.00)
ev <- c(1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1)#'
fakedata <- as.data.frame(cbind(id, u, s, ev))
fakedata2ts <- prepare_data(u = fakedata$u,
s_out = fakedata$s,
ev = fakedata$ev,
ds = .5)
# Fit a fake model - not optimal smoothing
fakemod <- fit2ts(fakedata2ts,
optim_method = "LMMsolver")
# Get hazard
get_hazard_2d_LMM(fakemod)
devtools::load_all(".")
id <- 1:20
u <- c(5.43, 3.25, 8.15, 5.53, 7.28, 6.61, 5.91, 4.94, 4.25, 3.86, 4.05, 6.86,
4.94, 4.46, 2.14, 7.56, 5.55, 7.60, 6.46, 4.96)
s <- c(0.44, 4.89, 0.92, 1.81, 2.02, 1.55, 3.16, 6.36, 0.66, 2.02, 1.22, 3.96,
7.07, 2.91, 3.38, 2.36, 1.74, 0.06, 5.76, 3.00)
ev <- c(1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1)#'
fakedata <- as.data.frame(cbind(id, u, s, ev))
fakedata2ts <- prepare_data(u = fakedata$u,
s_out = fakedata$s,
ev = fakedata$ev,
ds = .5)
# Fit a fake model - not optimal smoothing
fakemod <- fit2ts(fakedata2ts,
optim_method = "LMMsolver")
# Get hazard
get_hazard_2d_LMM(fakemod)
View(fakemod)
plot(fakemod)
devtools::load_all(".")
plot(fakemod)
styler:::style_active_file()
devtools::load_all(".")
# Get hazard
get_hazard_2d_LMM(fakemod)
devtools::load_all(".")
# Get hazard
get_hazard_2d_LMM(fakemod)
plot(fakemod)
get_hazard_2d_LMM(fakemod,
plot_grid = list(c(umin = 3, umax = 8.5, du = .1)),
c(smin = 0, smax = 7.1, ds = .1))
get_hazard_2d_LMM(fakemod,
plot_grid = list(c(umin = 3, umax = 8.5, du = .1),
c(smin = 0, smax = 7.1, ds = .1)))
plot(fakemod,
plot_options = list(
original = TRUE
))
devtools::load_all(".")
plot(fakemod)
devtools::load_all(".")
plot(fakemod)
devtools::load_all(".")
plot(fakemod)
plot(fakemod,
which_plot = "survival",
direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
surv_slices = TRUE
))
devtools::load_all(".")
plot(fakemod,
which_plot = "survival",
direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
surv_slices = TRUE
))
devtools::load_all(".")
plot(fakemod,
which_plot = "survival",
direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
surv_slices = TRUE
))
devtools::load_all(".")
plot(fakemod,
which_plot = "survival",
direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
surv_slices = TRUE
))
plot(fakemod,
which_plot = "cumhaz",
direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
cumhaz_slices = TRUE
))
plot(fakemod,
which_plot = "cumhaz",
direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
#cumhaz_slices = TRUE
))
plot(fakemod,
which_plot = "cumhaz",
direction = "u",
#where_slices = c(4, 6, 8),
plot_options = list(
cumhaz_slices = TRUE
))
plot(fakemod,
which_plot = "cumhaz",
#direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
cumhaz_slices = TRUE
))
devtools::load_all(".")
plot(fakemod,
which_plot = "cumhaz",
#direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
cumhaz_slices = TRUE
))
devtools::load_all(".")
plot(fakemod,
which_plot = "cumhaz",
#direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
cumhaz_slices = TRUE
))
where_slices = c(4, 6, 8)
direction = NULL
(!is.null(where_slices)) & is.null(direction)
devtools::load_all(".")
plot(fakemod,
which_plot = "cumhaz",
#direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
cumhaz_slices = TRUE
))
plot(fakemod,
which_plot = "cumhaz",
#direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
cumhaz_slices = TRUE
))
devtools::load_all(".")
id <- 1:20
u <- c(5.43, 3.25, 8.15, 5.53, 7.28, 6.61, 5.91, 4.94, 4.25, 3.86, 4.05, 6.86,
4.94, 4.46, 2.14, 7.56, 5.55, 7.60, 6.46, 4.96)
s <- c(0.44, 4.89, 0.92, 1.81, 2.02, 1.55, 3.16, 6.36, 0.66, 2.02, 1.22, 3.96,
7.07, 2.91, 3.38, 2.36, 1.74, 0.06, 5.76, 3.00)
ev <- c(1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1)
x1 <- c(0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0)
fakedata <- as.data.frame(cbind(id, u, s, ev, x1))
fakedata2ts <- prepare_data(data = fakedata,
u = "u",
s_out = "s",
ev = "ev",
ds = .5,
individual = TRUE,
covs = "x1")
# Fit a fake model - not optimal smoothing
fakemod <- fit2ts(fakedata2ts,
optim_method = "grid_search",
lrho = list(seq(1, 1.5, .5),
seq(1, 1.5, .5)))
get_hr(fakemod)
devtools::load_all(".")
get_hr(fakemod)
library(TwoTimeScales)
dt2ts_cov <- prepare_data(data = reccolon2ts,
u = "timer",
s_in = "entrys",
s_out = "timesr",
events = "status",
ds = 30,
individual = TRUE,
covs = c("rx", "node4", "sex"))
str(dt2ts_cov)
print(dt2ts_cov)
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
dt1ts <- prepare_data(data = reccolon2ts,
s_in = "entrys",
s_out = "timesr",
events = "status",
ds = 180)
## fitting the model with fit1ts() - default options
mod1 <- fit1ts(dt1ts)
mod1 <- fit1ts(dt1ts,
optim_method = "LMMsolver")
=======
>>>>>>> 010be51fbd23b8af4600244358342ecddf1439c4
devtools::run_examples()
styler:::style_active_file()
devtools::run_examples()
devtools::load_all(".")
dt1ts <- prepare_data(
data = reccolon2ts,
s_in = "entrys",
s_out = "timesr",
events = "status",
ds = 180
)
mod1 <- fit1ts(dt1ts)
# Obtain 1d hazard
get_hazard_1d(mod1)
# Change grid
get_hazard_1d(mod1,
plot_grid = c("smin" = 0, "smax" = 2730, "ds" = 30))
# Change grid
get_hazard_1d(mod1,
plot_grid = c(smin = 0, smax = 2730, ds = 30))
devtools::load_all(".")
# Change grid
get_hazard_1d(mod1,
plot_grid = c(smin = 0, smax = 2730, ds = 30))
styler:::style_active_file()
devtools::run_examples()
devtools::run_examples()
dt1ts <- prepare_data(data = reccolon2ts,
s_in = "entrys",
s_out = "timesr",
events = "status",
ds = 180)
## fitting the model with fit1ts() - default options
mod1 <- fit1ts(dt1ts,
optim_method = "LMMsolver")
plot(mod1)
devtools::load_all(".")
devtools::run_examples()
get_hazard_1d(mod1,
plot_grid = c(smin = 0, smax = 2730, ds = 30)
)
mod1 <- fit1ts(dt1ts,
optim_method = "LMMsolver")
get_hazard_1d(mod1,
plot_grid = c(smin = 0, smax = 2730, ds = 30)
)
get_hazard_1d_LMM(mod1,
plot_grid = c(smin = 0, smax = 2730, ds = 30)
)
devtools::check(remote = TRUE, manual = TRUE)
usethis::use_news_md()
devtools::check_win_devel()
devtools::check_mac_release()
pak::pkg_install("rhub")
install.packages("rhub")
rhub::rhub_setup()
styler:::style_active_file()
rhub::rhub_doctor()
rhub::rhub_check()
> use_release_issue()
> use_release_issue()
> use_release_issue()
use_release_issue()
usethis::use_release_issue()
usethis::use_cran_comments()
usethis::use_github_links()
urlchecker::url_check()
urlchecker::url_check()
urlchecker::url_check()
usethis::use_github_links()
devtools::build_readme()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
devtools::load_all(".")
library(TwoTimeScales)
dt2ts <- prepare_data(data = reccolon2ts,
u = "timer",
s_out = "timesr",
events = "status",
ds = 30, du = 30)
print(dt2ts)
mod1 <- fit2ts(data2ts = dt2ts,
Bbases_spec = list(bdeg = 3,
nseg_s = 20,
min_s = 0,
max_s = 2730,
nseg_u = 20,
min_u = 0,
max_u = 2300),
pord = 2,
optim_method = "ucminf",
optim_criterion = "aic")
save(mod1, file = "modelcolon.Rda")
library(TwoTimeScales)
mycol2 <- function(nshades){
colorspace::sequential_hcl(n = nshades, "PurpOr")
}
plot(mod1,
which_plot = "survival",
plot_options = list(col_palette = mycol2,
main = "Survival function",
xlab = "Time at recurrence",
ylab = "Time since recurrence",
contour_nlev = 20))
plot(mod1,
which_plot = "survival",
where_slices = c(30, 60, 90, 180, 365, 1000, 2000),
direction = "u",
plot_options = list(
surv_slices = TRUE,
main = "Slices of the survival function",
xlab = "Time since randomization",
ylab = "Survival"))
legend("topright",
legend = c(30, 60, 90, 180, 365, 1000, 2000),
lty = 1,
col = grDevices::gray.colors(7))
par(mfrow = c(1,2))
plot(mod1,
which_plot = "survival",
plot_options = list(col_palette = mycol2,
main = "Survival function",
xlab = "Time at recurrence",
ylab = "Time since recurrence",
contour_nlev = 20))
plot(mod1,
which_plot = "survival",
where_slices = c(30, 60, 90, 180, 365, 1000, 2000),
direction = "u",
plot_options = list(
surv_slices = TRUE,
main = "Slices of the survival function",
xlab = "Time since randomization",
ylab = "Survival"))
legend("topright",
legend = c(30, 60, 90, 180, 365, 1000, 2000),
lty = 1,
col = grDevices::gray.colors(7))
mycol3 <- function(nshades){
colorspace::sequential_hcl(n = nshades, "BluGrn")
}
par(mfrow = c(1,2))
plot(mod1,
which_plot = "cumhaz",
plot_options = list(col_palette = mycol3,
main = "Cumulative hazard",
xlab = "Time at recurrence",
ylab = "Time since recurrence",
contour_nlev = 20))
plot(mod1,
which_plot = "cumhaz",
where_slices = c(30, 60, 90, 180, 365, 1000, 2000),
direction = "u",
plot_options = list(
cumhaz_slices = TRUE,
main = "Slices of the cumulative hazard",
xlab = "Time since randomization",
ylab = "Cumulative hazard"))
max(dt2ts$bins$bins_u)
max(dt2ts$bins$bins_s)
max(reccolon2ts$timedc)
devtools::check_win_devel()
use_github_action()
use_github_action()
usethis::use_github_action()
usethis::use_version('major')
devtools::submit_cran()
devtools::submit_cran()
