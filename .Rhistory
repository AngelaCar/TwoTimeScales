}
# ---- Construct B-splines ----
Bu <- JOPS::bbase(x = bins$midu, nseg = Bbases$nseg_u,
xl = Bbases$min_u, xr = Bbases$max_u, bdeg = Bbases$bdeg)
nbu <- ncol(Bu)
Bs <- JOPS::bbase(x = bins$mids, nseg = Bbases$nseg_s,
xl = Bbases$min_s, xr = Bbases$max_s, bdeg = Bbases$bdeg)
nbs <- ncol(Bs)
Du <- diff(diag(nbu), diff = pord)
Iu <- diag(nbu)
Ds <- diff(diag(nbs), diff = pord)
Is <- diag(nbs)
formula_fixed <- as.formula("y ~ 1")
optimal_model <- LMMsolver::LMMsolve(fixed = formula_fixed,
spline = ~spl2D(x1 = u, x2 = s,
nseg = c(Bbases$nseg_u, Bbases$nseg_s)),
family = poisson(),
offset = log(dataLMM$r),
data = dataLMM)
AIC_BIC_LMM <- getAIC_BIC_LMM(fit = optimal_model, offset = dataLMM$r)
alpha <- coef(optimal_model)$`s(u, s)`
Alpha <- matrix(alpha, nrow = nbu, ncol = nbu, byrow = T)
library(fields)
image.plot(Alpha)
image.plot(mod1$optimal_model$Alpha)
plot(mod1)
u_coord <-  bins$midu
s_coord <-  bins$mids
plotgrid <- expand.grid(u_coord, s_coord)
names(plotgrid) <- c("u_coord", "s_coord")
trend2D <- obtainSmoothTrend(mod2$optima_model,
newdata=plotgrid,  includeIntercept =TRUE)
trend2D <- obtainSmoothTrend(optima_model,
newdata=plotgrid,  includeIntercept =TRUE)
trend2D <- obtainSmoothTrend(optimal_model,
newdata=plotgrid,  includeIntercept =TRUE)
names(plotgrid) <- c("u", "s")
trend2D <- obtainSmoothTrend(optimal_model,
newdata=plotgrid,  includeIntercept =TRUE)
Haz <- matrix(trend2D$ypred, nrow=length(u_coord), ncol=length(s_coord))
image.plot(Haz)
summary(mod1)
coef(optimal_model)
alpha <- coef(optimal_model)$`Intercept` + coef(optimal_model)$`lin(u, s)_1` +
coef(optimal_model)$`lin(u, s)_2` + coef(optimal_model)$`lin(u, s)_3`+
coef(optimal_model)$`s(u, s)`
Alpha <- matrix(alpha, nrow = nbu, ncol = nbu, byrow = T)
image.plot(Alpha)
coef(optimal_model)$`Intercept`
coef(optimal_model)$`(Intercept)`
alpha <- coef(optimal_model)$`(Intercept)` + coef(optimal_model)$`lin(u, s)_1` +
coef(optimal_model)$`lin(u, s)_2` + coef(optimal_model)$`lin(u, s)_3`+
coef(optimal_model)$`s(u, s)`
Alpha <- matrix(alpha, nrow = nbu, ncol = nbu, byrow = T)
coef(optimal_model)$`lin(u, s)_1`
coef(optimal_model)
alpha <- coef(optimal_model)$`(Intercept)` + coef(optimal_model)$`lin(u, s)` +
coef(optimal_model)$`s(u, s)`
coef(optimal_model)$`lin(u, s)`
alpha <- coef(optimal_model)$`(Intercept)` + coef(optimal_model)$`lin(u, s)`[1] +
+ coef(optimal_model)$`lin(u, s)`[2] + + coef(optimal_model)$`lin(u, s)`[3] +
coef(optimal_model)$`s(u, s)`
coef(optimal_model)$`lin(u, s)`[1]
coef(optimal_model)$`lin(u, s)`[2]
coef(optimal_model)$`(Intercept)` + coef(optimal_model)$`lin(u, s)`[1] +
+ coef(optimal_model)$`lin(u, s)`[2] + coef(optimal_model)$`lin(u, s)`[3]
alpha <- coef(optimal_model)$`(Intercept)` + coef(optimal_model)$`lin(u, s)`[1] +
+ coef(optimal_model)$`lin(u, s)`[2] + coef(optimal_model)$`lin(u, s)`[3] +
coef(optimal_model)$`s(u, s)`
Alpha <- matrix(alpha, nrow = nbu, ncol = nbu, byrow = T)
image.plot(Alpha)
alpha <- coef(optimal_model)$`(Intercept)` +
# + coef(optimal_model)$`lin(u, s)`[1] +
#   + coef(optimal_model)$`lin(u, s)`[2] + coef(optimal_model)$`lin(u, s)`[3] +
coef(optimal_model)$`s(u, s)`
Alpha <- matrix(alpha, nrow = nbu, ncol = nbu, byrow = T)
image.plot(Alpha)
image.plot(mod1$optimal_model$Alpha)
Alpha <- t(matrix(alpha, nrow = nbu, ncol = nbu, byrow = T))
image.plot(mod1$optimal_model$Alpha)
image.plot(Alpha)
Alpha <- matrix(alpha, nrow = nbu, ncol = nbs, byrow = T)
image.plot(Alpha)
Alpha <- matrix(alpha, nrow = nbu, ncol = nbs, byrow = F)
image.plot(Alpha)
alpha
mod1$optimal_model$Alpha
View(Alpha)
View(Alpha)
Alpha <- matrix(alpha, nrow = nbu, ncol = nbs, byrow = T)
View(Alpha)
Bu%*%Alpha %*%t(Bs)
Eta <- Bu%*%Alpha %*%t(Bs)
image.plot(Eta)
image.plot(exp(Eta))
alpha <- #coef(optimal_model)$`(Intercept)` +
coef(optimal_model)$`lin(u, s)`[1] +
+ coef(optimal_model)$`lin(u, s)`[2] + coef(optimal_model)$`lin(u, s)`[3] +
coef(optimal_model)$`s(u, s)`
Alpha <- matrix(alpha, nrow = nbu, ncol = nbs, byrow = T)
View(Alpha)
plotgrid
alpha <- coef(optimal_model)$`(Intercept)` +
# coef(optimal_model)$`lin(u, s)`[1] +
#  + coef(optimal_model)$`lin(u, s)`[2] + coef(optimal_model)$`lin(u, s)`[3] +
coef(optimal_model)$`s(u, s)`
Alpha <- matrix(alpha, nrow = nbu, ncol = nbs, byrow = T)
source("C:/Cloud/PhD project/TwoTimeScales/R/fit2ts.R")
summary(optimal_model)
summary(optimal_model, "variances")
optimal_model$sigma2e/optimal_model$tau2e
10^mod1$optimal_logrho
covs <- subset(reccolon2ts, select = c("rx", "sex", "adhere", "obstruct", "node4"))
dt2ts_cov <- prepare_data(u = reccolon2ts$timer,
s_out = reccolon2ts$timesr,
events = reccolon2ts$status,
ds = 30,
individual = TRUE,
covs = covs)
data2ts = dt2ts_cov
dataLMM <- prepare_data_LMMsolver(Y=Y, R=R, Z=Z, bins=bins)
xnam <- colnames(data2ts$bindata$Z)
formula_fixed <- as.formula(paste("y ~ ", paste(xnam, collapse= "+")))
paste("y ~ ", paste(xnam, collapse= "+"))
xnam
as.formula(paste("y ~ ", paste(xnam, collapse= "+")))
paste("y ~ ", paste(xnam, collapse= "+ "))
formula_fixed <- as.formula(paste("y ~ ", paste(xnam, collapse= "+ ")))
formula_fixed <- as.formula(paste("y ~ ", paste(xnam, collapse= "+ ", sub("+", "_"))))
formula_fixed <- as.formula(paste("y ~ ", paste(xnam, sub("+", "_"), collapse= "+ ")))
formula_fixed <- as.formula(paste("y ~ ", paste(xnam, sub("+", "_", x), collapse= "+ ")))
load("C:/Cloud/P_UnionFormatioDissolution/PairfamMSM_Boosting/biopart_rel_long_cov.Rda")
View(biopart_rel_long_cov)
grepl("+", xnam, fixed = T)
which(grepl("+", xnam, fixed = T)))
which(grepl("+", xnam, fixed = T))
length(which(grepl("+", xnam, fixed = T))) != 0
if(length(which(grepl("+" | "-", xnam, fixed = T))) != 0)
;
length(which(grepl("+" | "-", xnam, fixed = T))) != 0
if(length(which(grepl(("+" | "-"), xnam, fixed = T))) != 0)
;
grepl(("+" | "-"), xnam, fixed = T)
grepl(c("+","-"), xnam, fixed = T)
if(length(which(grepl("+", xnam, fixed = T))) != 0){
xnam[which(grepl("+", xnam, fixed = T))] <- sub("+", "_", xnam[which(grepl("+", xnam, fixed = T))] )
}
xnam
xnam[which(grepl("+", xnam, fixed = T))]
sub("+", "_", x=xnam[which(grepl("+", xnam, fixed = T))] )
xnam <- colnames(data2ts$bindata$Z)
xnam[which(grepl("+", xnam, fixed = T))] <- sub('+','_', x=xnam[which(grepl("+", xnam, fixed = T))] )
xnam
xnam[which(grepl("+", xnam, fixed = T))]
xnam <- colnames(data2ts$bindata$Z)
xnam[which(grepl("+", xnam, fixed = T))] <- gsub('+','_', x=xnam[which(grepl("+", xnam, fixed = T))] )
xnam
xnam <- colnames(data2ts$bindata$Z)
xnam[which(grepl("+", xnam, fixed = T))] <- sub('+','_', x=xnam[which(grepl("+", xnam, fixed = T))] , fixed = T)
xnam
formula_fixed <- as.formula(paste("y ~ ", paste(xnam, collapse= "+")))
optimal_model <- LMMsolver::LMMsolve(fixed = formula_fixed,
spline = ~spl2D(x1 = u, x2 = s,
nseg = c(Bbases$nseg_u, Bbases$nseg_s)),
family = poisson(),
offset = log(dataLMM$r),
data = dataLMM)
source("C:/Cloud/PhD project/TwoTimeScales/R/fit2ts.R")
devtools::load_all
devtools::load_all()
covs <- subset(reccolon2ts, select = c("rx", "sex", "adhere", "obstruct", "node4"))
dt2ts_cov <- prepare_data(u = reccolon2ts$timer,
s_out = reccolon2ts$timesr,
events = reccolon2ts$status,
ds = 30,
individual = TRUE,
covs = covs)
data2ts = dt2ts_cov
dataLMM <- prepare_data_LMMsolver(Y=Y, R=R, Z=Z, bins=bins)
xnam <- colnames(data2ts$bindata$Z)
formula_fixed <- as.formula(paste("y ~ ", paste(xnam, collapse= "+")))
xnam
devtools::load_all()
rm(fit2ts())
rm(fit2ts
)
devtools::load_all()
covs <- subset(reccolon2ts, select = c("rx", "sex", "adhere", "obstruct", "node4"))
dt2ts_cov <- prepare_data(u = reccolon2ts$timer,
s_out = reccolon2ts$timesr,
events = reccolon2ts$status,
ds = 30,
individual = TRUE,
covs = covs)
data2ts = dt2ts_cov
dataLMM <- prepare_data_LMMsolver(Y=Y, R=R, Z=Z, bins=bins)
xnam <- colnames(data2ts$bindata$Z)
formula_fixed <- as.formula(paste("y ~ ", paste(xnam, collapse= "+")))
optimal_model <- LMMsolver::LMMsolve(fixed = formula_fixed,
spline = ~spl2D(x1 = u, x2 = s,
nseg = c(Bbases$nseg_u, Bbases$nseg_s)),
family = poisson(),
offset = log(dataLMM$r),
data = dataLMM)
Y <- data2ts$bindata$Y
R <- data2ts$bindata$R
Z <- data2ts$bindata$Z
bins <- data2ts$bins
dataLMM <- prepare_data_LMMsolver(Y=Y, R=R, Z=Z, bins=bins)
xnam <- colnames(data2ts$bindata$Z)
formula_fixed <- as.formula(paste("y ~ ", paste(xnam, collapse= "+")))
optimal_model <- LMMsolver::LMMsolve(fixed = formula_fixed,
spline = ~spl2D(x1 = u, x2 = s,
nseg = c(Bbases$nseg_u, Bbases$nseg_s)),
family = poisson(),
offset = log(dataLMM$r),
data = dataLMM)
AIC_BIC_LMM <- getAIC_BIC_LMM(fit = optimal_model, offset = dataLMM$r)
results <- list(
"optimal_model" = optimal_model,
"AIC_BIC" = AIC_BIC_LMM,
"nevents" = sum(Y),
"nu" = dim(Bu)[1],
"ns" = dim(Bs)[1],
"cu" = nbu,
"cs" = nbs,
"covariates" = ifelse(is.null(Z), "no", "yes")
)
class(results) <- "haz2tsLMM"
x <- optimal_model
nevents <- x$nevents
nu <- x$nu
ns <- x$ns
cu <- x$cu
cs <- x$cs
AIC <- x$AIC_BIC$AIC
BIC <- x$AIC_BIC$BIC
ED <- x$AIC_BIC$ED
x$term.labels.f
x$term.labels.f[-length(x$term.labels.f)]
namesCov <- x$term.labels.f[-c(1,length(x$term.labels.f))]
namesCov
coefLMM <- coef(x, se = T)[namesCov]
coefLMM
unlist(coefLMM)
rbind(coefLMM$Lev, coefLMM$Lev.Fluo,
coefLMM$male, coefLMM$adhere,
coefLMM$obstruct, coefLMM$node4)[, 1:3]
coef(x, se = T)
names(coefLMM)
coefLMM(which(names(coefLMM) == namesCov))
coefLMM[which(names(coefLMM) == namesCov)]
rbind(coefLMM)
coeftab[1,] <- coefLMM[[1]][1:3]
coeftab <- matrix(NA, 1, 3)
coeftab[1,] <- coefLMM[[1]][1:3]
coeftab
coeftab[1,] <- unlist(coefLMM[[1]][1:3])
coefLMM[[1]]
coeftab <- matrix(NA, 1, 4)
coeftab <- matrix(NA, 1, 4)
coeftab[1,] <- coefLMM[[1]]
coeftab <- matrix(NA, length(namesCov), 4)
coeftab[1,] <- coefLMM[[1]]
coeftab <- matrix(NA, length(namesCov), 4)
coeftab[1,] <- coefLMM[[1]]
if(length(namesCov) > 1){
for(ind in 2:length(namesCov)){
coeftab[ind,] <- coefLMM[[ind]]
}
}
length(namesCov)
coeftab <- matrix(NA, length(namesCov), 4)
coeftab[1,] <- coefLMM[[1]]
coefLMM[[1]]
str(coefLMM[[1]])
coeftab <- matrix(NA, length(namesCov), 3)
for(ind in 1:length(namesCov)){
coeftab[ind,1] <- coefLMM[[ind]]$coef
coeftab[ind,2] <- coefLMM[[ind]]$value
coeftab[ind,3] <- coefLMM[[ind]]$se
}
View(coeftab)
coeftab <- as.data.frame(coeftab)
names(coeftab) <- c("coef", "beta", "SE_beta")
coeftab$HR <- exp(coeftab$beta)
View(coeftab)
View(coeftab)
coeftab <- matrix(NA, length(namesCov), 3)
for(ind in 1:length(namesCov)){
coeftab[ind,1] <- coefLMM[[ind]]$coef
coeftab[ind,2] <- as.numeric(coefLMM[[ind]]$value)
coeftab[ind,3] <- as.numeric(coefLMM[[ind]]$se)
}
View(coeftab)
str(coeftab)
coeftab <- matrix(NA, length(namesCov), 3)
for(ind in 1:length(namesCov)){
coeftab[ind,1] <- coefLMM[[ind]]$coef
coeftab[ind,2] <- as.numeric(coefLMM[[ind]]$value)
coeftab[ind,3] <- as.numeric(coefLMM[[ind]]$se)
}
View(coefLMM)
View(coeftab)
coeftab <- as.data.frame(coeftab)
names(coeftab) <- c("coef", "beta", "SE_beta")
coeftab$HR <- exp(coeftab$beta)
coefLMM[[ind]]$value
as.numeric(coefLMM[[ind]]$value)
coeftab <- matrix(NA, length(namesCov), 3)
for(ind in 1:length(namesCov)){
coeftab[ind,1] <- coefLMM[[ind]]$coef
coeftab[ind,2] <- as.numeric(coefLMM[[ind]]$value)
coeftab[ind,3] <- as.numeric(coefLMM[[ind]]$se)
}
coeftab <- as.data.frame(coeftab)
names(coeftab) <- c("coef", "beta", "SE_beta")
coeftab$HR <- exp(coeftab$beta)
coeftab <- matrix(0, length(namesCov), 3)
for(ind in 1:length(namesCov)){
coeftab[ind,1] <- coefLMM[[ind]]$coef
coeftab[ind,2] <- as.numeric(coefLMM[[ind]]$value)
coeftab[ind,3] <- as.numeric(coefLMM[[ind]]$se)
}
coeftab <- as.data.frame(coeftab)
names(coeftab) <- c("coef", "beta", "SE_beta")
coeftab$HR <- exp(coeftab$beta)
coeftab <- matrix(0, length(namesCov), 3)
for(ind in 1:length(namesCov)){
coeftab[ind,1] <- coefLMM[[ind]]$coef
coeftab[ind,2] <- as.numeric(coefLMM[[ind]]$value)
coeftab[ind,3] <- as.numeric(coefLMM[[ind]]$se)
}
names(coeftab) <- c("coef", "beta", "SE_beta")
coeftab$HR <- exp(coeftab$beta)
coeftab[,HR] <- exp(coeftab$beta)
coeftab[HR]
View(coeftab)
colnames(coeftab) <- c("coef", "beta", "SE_beta")
View(coeftab)
coeftab[beta]
coeftab[,'beta']
exp(coeftab[,'beta'])
as.numeric(coefLMM[[ind]]$value)
round(as.numeric(coefLMM[[ind]]$value), 4)
coeftab[ind,2] <- round(as.numeric(coefLMM[[ind]]$value), 4)
colnames(coeftab) <- c("coef", "beta", "SE_beta")
coeftab[,'beta']
coeftab <- matrix(0, length(namesCov), 3)
View(coeftab)
for(ind in 1:length(namesCov)){
#coeftab[ind,1] <- coefLMM[[ind]]$coef
coeftab[ind,2] <- round(as.numeric(coefLMM[[ind]]$value), 4)
coeftab[ind,3] <- as.numeric(coefLMM[[ind]]$se)
}
coeftab <- as.data.frame(coeftab)
coeftab[,1] <- namesCov
colnames(coeftab) <- c("coef", "beta", "SE_beta")
coeftab[HR] <- exp(coeftab[,'beta'])
coeftab$HR <- exp(coeftab[,'beta'])
coeftab$SE_HR <- coeftab$HR * coeftab$SE_beta
res$coeftab <- coeftab
res <- list(nevents=nevents,nu=nu,ns=ns,cu=cu,cs=cs,AIC=AIC,BIC=BIC,ED=ED)
if(x$covariates == "yes"){
namesCov <- x$term.labels.f[-c(1,length(x$term.labels.f))]
coefLMM <- coef(x, se = T)[namesCov]
coeftab <- matrix(0, length(namesCov), 3)
for(ind in 1:length(namesCov)){
#coeftab[ind,1] <- coefLMM[[ind]]$coef
coeftab[ind,2] <- round(as.numeric(coefLMM[[ind]]$value), 4)
coeftab[ind,3] <- as.numeric(coefLMM[[ind]]$se)
}
coeftab <- as.data.frame(coeftab)
coeftab[,1] <- namesCov
colnames(coeftab) <- c("coef", "beta", "SE_beta")
coeftab$HR <- exp(coeftab[,'beta'])
coeftab$SE_HR <- coeftab$HR * coeftab$SE_beta
}
cat("Model specifications:\n")
cat("  number of events = ", res$nevents, "\n")
cat("  nu = ", res$nu, "\n")
cat("  ns = ", res$ns, "\n")
cat("  cu = ", res$cu, "\n")
cat("  cs = ", res$cs, "\n")
# cat("\nOptimal smoothing: \n")
# cat("  log10(rho_u) = ", res$log10rhou, "\n")
# cat("  log10(rho_s) = ", res$log10rhos, "\n")
# cat("  rho_u = ", res$rhou, "\n")
# cat("  rho_s = ", res$rhos, "\n")
cat("\n")
if(is.null(res$coeftab)) cat("Model with no covariates") else {
colnames(res$coeftab) <- c("coef", "se(coef)", "exp(coef)", "se(exp(coef))")
print(res$coeftab)
}
cat("\n\n")
cat("Model fit: \n")
cat("  AIC = ", res$AIC, "\n")
cat("  BIC = ", res$BIC, "\n")
nevents <- x$nevents
nu <- x$nu
ns <- x$ns
cu <- x$cu
cs <- x$cs
AIC <- x$AIC_BIC$AIC
BIC <- x$AIC_BIC$BIC
ED <- x$AIC_BIC$ED
#log10rhou <- x$optimal_model$
#log10rhos <- x$optimal_logrho[2]
#rhou <- 10^log10rhou
#rhos <- 10^log10rhos
# if(!is.null(x$optimal_model$beta)){ # model with covariates
#   hr <- get_hr(x)
# }
res <- list(nevents=nevents,nu=nu,ns=ns,cu=cu,cs=cs,AIC=AIC,BIC=BIC,ED=ED)
if(x$covariates == "yes"){
namesCov <- x$term.labels.f[-c(1,length(x$term.labels.f))]
coefLMM <- coef(x, se = T)[namesCov]
coeftab <- matrix(0, length(namesCov), 3)
for(ind in 1:length(namesCov)){
coeftab[ind,2] <- round(as.numeric(coefLMM[[ind]]$value), 4)
coeftab[ind,3] <- as.numeric(coefLMM[[ind]]$se)
}
coeftab <- as.data.frame(coeftab)
coeftab[,1] <- namesCov
colnames(coeftab) <- c("coef", "beta", "SE_beta")
coeftab$HR <- exp(coeftab[,'beta'])
coeftab$SE_HR <- coeftab$HR * coeftab$SE_beta
}
devtools::load_all()
devtools::load_all()
mod_cov <- fit2ts(data2ts = dt2ts_cov,
Bbases_spec = list(bdeg = 3,
nseg_s = 20,
min_s = 0,
max_s = 2730,
nseg_u = 20,
min_u = 0,
max_u = 2300),
pord = 2,
optim_method = "LMMsolver",
optim_criterion = "aic")
summary(mod_cov)
summary(mod1)
str(mod_cov)
devtools::load_all()
covs <- subset(reccolon2ts, select = c("rx", "sex", "adhere", "obstruct", "node4"))
dt2ts_cov <- prepare_data(u = reccolon2ts$timer,
s_out = reccolon2ts$timesr,
events = reccolon2ts$status,
ds = 30,
individual = TRUE,
covs = covs)
mod_cov <- fit2ts(data2ts = dt2ts_cov,
Bbases_spec = list(bdeg = 3,
nseg_s = 20,
min_s = 0,
max_s = 2730,
nseg_u = 20,
min_u = 0,
max_u = 2300),
pord = 2,
optim_method = "LMMsolver",
optim_criterion = "aic")
summary(mod_cov)
View(mod_cov)
devtools::load_all()
summary(mod_cov)
x = mod_cov
inherits(x, "haz2tsLMM")
nevents <- x$nevents
nu <- x$nu
ns <- x$ns
cu <- x$cu
cs <- x$cs
AIC <- x$AIC_BIC$AIC
BIC <- x$AIC_BIC$BIC
ED <- x$AIC_BIC$ED
res <- list(nevents=nevents,nu=nu,ns=ns,cu=cu,cs=cs,AIC=AIC,BIC=BIC,ED=ED)
(x$covariates == "yes")
namesCov <- x$optimal_model$term.labels.f[-c(1,length(x$optimal_model$term.labels.f))]
coefLMM <- coef(x$optimal_model, se = T)[namesCov]
coeftab <- matrix(0, length(namesCov), 3)
for(ind in 1:length(namesCov)){
coeftab[ind,2] <- round(as.numeric(coefLMM[[ind]]$value), 4)
coeftab[ind,3] <- as.numeric(coefLMM[[ind]]$se)
}
coeftab <- as.data.frame(coeftab)
coeftab[,1] <- namesCov
colnames(coeftab) <- c("coef", "beta", "SE_beta")
coeftab$HR <- exp(coeftab[,'beta'])
coeftab$SE_HR <- coeftab$HR * coeftab$SE_beta
res$coeftab <- coeftab
cat("Model specifications:\n")
cat("  number of events = ", res$nevents, "\n")
cat("  nu = ", res$nu, "\n")
cat("  ns = ", res$ns, "\n")
cat("  cu = ", res$cu, "\n")
cat("  cs = ", res$cs, "\n")
# cat("\nOptimal smoothing: \n")
# cat("  log10(rho_u) = ", res$log10rhou, "\n")
# cat("  log10(rho_s) = ", res$log10rhos, "\n")
# cat("  rho_u = ", res$rhou, "\n")
# cat("  rho_s = ", res$rhos, "\n")
cat("\n")
if(is.null(res$coeftab)) cat("Model with no covariates") else {
colnames(res$coeftab) <- c("coef", "se(coef)", "exp(coef)", "se(exp(coef))")
print(res$coeftab)
}
cat("\n\n")
cat("Model fit: \n")
cat("  AIC = ", res$AIC, "\n")
cat("  BIC = ", res$BIC, "\n")
