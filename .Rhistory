<<<<<<< HEAD
=======
ylab = NULL,
xlim = NULL,
ylim = NULL,
contour_lines = TRUE,
contour_col = NULL,
contour_cex = .8,
contour_nlev = 10,
cex_main = 1.2,
cex_lab = 1,
HR = FALSE,
symmetric_CI = TRUE,
confidence = .95,
col_beta = "blue",
pch = 20,
lwd = 2
)
Nopts <- names(opts)
namesPO <- names(plot_options)
opts[namesPO] <- plot_options
if (length(namesPO[!namesPO %in% Nopts]) > 0) {
warning("Undefined entries in `plot_options`. Default settings are used.\n")
warning(
"Undefined keyword(s): ",
paste(namesPO[!namesPO %in% Nopts], collapse = ", ")
)
}
surv <- surv2ts(
fitted_model = x,
plot_grid = plot_grid,
midpoints = opts$midpoints,
where_slices = where_slices,
direction = direction,
tmax = opts$tmax
)
CumHaz <- cumhaz2ts(fitted_model = x,
plot_grid = plot_grid,
midpoints = opts$midpoints,
where_slices = where_slices,
direction = direction,
tmax = opts$tmax)
to_plot <- CumHaz$CumHaz
new_grid <- CumHaz$Haz$new_plot_grid
if(opts$cumhaz_slices){
if(is.null(where_slices)) stop("Please provide location for the cut-points over `u` (where_slices)")
grid_us <- expand.grid(u = new_grid$intu, s = new_grid$ints)
grid_us$to_plot <- c(to_plot)
onlyslic <- subset(grid_us, u %in% where_slices)
to_plot_v <- onlyslic$to_plot
dim(to_plot_v) <- c(length(where_slices), length(new_grid$ints))
to_plot <- to_plot_v
}
grid_us
View(to_plot_v)
# ---- Cut extrapolated hazard ----
if (opts$cut_extrapolated) {
cut <- matrix(NA, nrow(to_plot), ncol(to_plot))
for (row in 1:nrow(to_plot)) {
for (col in 1:ncol(to_plot)) {
cut[row, col] <- ifelse((new_grid$ints[col] + new_grid$intu[row] > opts$tmax + new_grid$du) &
(((new_grid$smax - new_grid$ints[col]) / (new_grid$umax - new_grid$intu[row]) >= -1) |
((new_grid$smax - new_grid$ints[col]) / (new_grid$umax - new_grid$intu[row]) == -Inf)),
NA, 1
)
}
}
to_plot <- to_plot * cut
# adjust legend breaks to match cutted surface
if (which_plot %in% c("hazard", "SE", "cumhaz")) {
K <- (max(to_plot, na.rm = T) - min(to_plot, na.rm = T)) / (opts$n_shades + 1)
opts$breaks <- seq(min(to_plot, na.rm = T),
min(to_plot, na.rm = T) + K * (opts$n_shades + 1),
length = (opts$n_shades + 1)
)
}
}
cut <- matrix(NA, nrow(to_plot), ncol(to_plot))
for (row in 1:nrow(to_plot)) {
for (col in 1:ncol(to_plot)) {
cut[row, col] <- ifelse((new_grid$ints[col] + new_grid$intu[row] > opts$tmax + new_grid$du) &
(((new_grid$smax - new_grid$ints[col]) / (new_grid$umax - new_grid$intu[row]) >= -1) |
((new_grid$smax - new_grid$ints[col]) / (new_grid$umax - new_grid$intu[row]) == -Inf)),
NA, 1
)
}
}
to_plot <- to_plot * cut
to_plot
View(to_plot)
cut
View(cut)
surv <- surv2ts(
fitted_model = x,
plot_grid = plot_grid,
midpoints = opts$midpoints,
where_slices = where_slices,
direction = direction,
tmax = opts$tmax
)
new_grid <- attr(surv, "plot_grid")
to_plot <- surv$Surv2ts
View(new_grid)
if(is.null(where_slices)) stop("Please provide location for the cut-points over `u` (where_slices)")
grid_us <- expand.grid(u = new_grid$intu, s = new_grid$ints)
grid_us$to_plot <- c(to_plot)
onlyslic <- subset(grid_us, u %in% where_slices)
to_plot_v <- onlyslic$to_plot
dim(to_plot_v) <- c(length(where_slices), length(new_grid$ints))
to_plot <- to_plot_v
}
if(is.null(where_slices)) stop("Please provide location for the cut-points over `u` (where_slices)")
grid_us <- expand.grid(u = new_grid$intu, s = new_grid$ints)
grid_us$to_plot <- c(to_plot)
CumHaz <- cumhaz2ts(fitted_model = x,
plot_grid = plot_grid,
midpoints = opts$midpoints,
where_slices = where_slices,
direction = direction,
tmax = opts$tmax)
to_plot <- CumHaz$CumHaz
new_grid <- CumHaz$Haz$new_plot_grid
grid_us <- expand.grid(u = new_grid$intu, s = new_grid$ints)
grid_us$to_plot <- c(to_plot)
onlyslic <- subset(grid_us, u %in% where_slices)
to_plot_v <- onlyslic$to_plot
dim(to_plot_v) <- c(length(where_slices), length(new_grid$ints))
to_plot <- to_plot_v
x <- new_grid$ints
plt <- plot_slices(
x = x,
y = to_plot,
direction = direction,
plot_options = list(
loghazard = opts$loghazard,
log10hazard = opts$log10hazard,
col_palette = opts$col_palette,
n_shades = length(where_slices),
main = opts$main,
xlab = opts$xlab,
ylab = opts$ylab,
xlim = opts$xlim,
ylim = opts$ylim,
cex_main = opts$cex_main,
cex_lab = opts$cex_lab,
lwd = opts$lwd
)
)
View(cut)
load("C:/Cloud/PhD project/Tex files/Paper4/BC-rec_model.Rda")
devtools::load_all(".")
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
which_plot = "cumhaz",
where_slices = c(0.5, 1, 2, 3, 4, 5, 8, 10),
direction = "u",
plot_options = list(col_palette = mypal,
cut_extrapolated = TRUE,
tmax = 18.85,
cumhaz_slices = TRUE,
main = "Cross-sections of the cumulative hazard",
xlab = "Time since recurrence",
ylab = "Cumulative hazard"))
# Reproduces Figure 5
# cross-sections of the hazard
mypal <- function(n){
rev(colorRampPalette(RColorBrewer::brewer.pal(9, "YlGnBu"))(n))
}
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
which_plot = "cumhaz",
where_slices = c(0.5, 1, 2, 3, 4, 5, 8, 10),
direction = "u",
plot_options = list(col_palette = mypal,
cut_extrapolated = TRUE,
tmax = 18.85,
cumhaz_slices = TRUE,
main = "Cross-sections of the cumulative hazard",
xlab = "Time since recurrence",
ylab = "Cumulative hazard"))
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
which_plot = "survival",
where_slices = c(0.5, 1, 2, 3, 4, 5, 8, 10),
direction = "u",
plot_options = list(col_palette = mypal,
cut_extrapolated = TRUE,
tmax = 18.85,
surv_slices = TRUE,
main = "Cross-sections of the survival",
xlab = "Time since recurrence",
ylab = "Survival probability"))
pdf("SurvivalCrossSections.pdf", width = 8, height = 6)
par(font.main = 1,
cex.main = 1.5, cex.lab = 1.2,
mar = c(4, 4, 4, 6))
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
which_plot = "survival",
where_slices = c(0.5, 1, 2, 3, 4, 5, 8, 10),
direction = "u",
plot_options = list(col_palette = mypal,
>>>>>>> 010be51fbd23b8af4600244358342ecddf1439c4
cut_extrapolated = TRUE,
tmax = 18.85,
surv_slices = TRUE,
main = "Cross-sections of the survival",
xlab = "Time since recurrence",
ylab = "Survival probability"))
legend(x = 15, y = .8,
xpd = T,
inset = c(-0.3,0),
legend = c(0.5, 1, 2, 3, 4, 5, 8, 10),
title = "Time of\n recurrence",
lwd = 2,
bty = "n",
col = mypal(8))
dev.off()
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
which_plot = "cumhaz",
where_slices = c(0.5, 1, 2, 3, 4, 5, 8, 10),
direction = "u",
plot_options = list(col_palette = mypal,
cut_extrapolated = TRUE,
tmax = 18.85,
cumhaz_slices = TRUE,
main = "Cross-sections of the cumulative hazard",
xlab = "Time since recurrence",
ylab = "Cumulative hazard"))
pdf("CumhazCrossSections.pdf", width = 8, height = 6)
par(font.main = 1,
cex.main = 1.5, cex.lab = 1.2,
mar = c(4, 4, 4, 6))
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
which_plot = "cumhaz",
where_slices = c(0.5, 1, 2, 3, 4, 5, 8, 10),
direction = "u",
plot_options = list(col_palette = mypal,
cut_extrapolated = TRUE,
tmax = 18.85,
cumhaz_slices = TRUE,
main = "Cross-sections of the cumulative hazard",
xlab = "Time since recurrence",
ylab = "Cumulative hazard"))
legend(x = 15, y = 1.5,
xpd = T,
inset = c(-0.3,0),
legend = c(0.5, 1, 2, 3, 4, 5, 8, 10),
title = "Time of\n recurrence",
lwd = 2,
bty = "n",
col = mypal(8))
dev.off()
# ---- Competing risks quantities ----
# Calculate the competing risks quantities using functions from the package
H_rec <- cumhaz2ts(mod_reccov,
plot_grid = list(c(umin = 24, umax = 90, du = .5),
c(smin = 0, smax = 14.2, ds = .1)),
cause = "recurrence")
pdf("Haz-us.pdf", width = 6.5, height = 6)
par(font.main = 1,
cex.main = 1.8, cex.lab = 1.2)
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
plot_options = list(n_shades = 100,
tmax = 18.85,
cut_extrapolated = T,
main = "Baseline hazard of death",
xlab = "Time of recurrence (years)",
ylab = "Time since recurrence (years)"))
dev.off()
# Reproduces Figure 4b
pdf("Haz-ts.pdf", width = 7.2, height = 6)
par(font.main = 1,
cex.main = 1.8, cex.lab = 1.2)
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
plot_options = list(n_shades = 100,
tmax = 18.85,
cut_extrapolated = T,
original = TRUE,
main = "Baseline hazard of death",
xlab = "Time since surgery (years)",
ylab = "Time since recurrence (years)"))
dev.off()
# Reproduces Figure 5
# cross-sections of the hazard
mypal <- function(n){
rev(colorRampPalette(RColorBrewer::brewer.pal(9, "YlGnBu"))(n))
}
pdf("CrossSections.pdf", width = 8, height = 6)
par(font.main = 1,
cex.main = 1.8, cex.lab = 1.2,
mar = c(4, 4, 4, 6))
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
which_plot = "slices",
where_slices = c(0.5, 1, 2, 3, 4, 5, 8, 10),
direction = "u",
plot_options = list(col_palette = mypal,
cut_extrapolated = TRUE,
tmax = 18.85,
main = "Cross-sections of the hazard",
xlab = "Time since recurrence",
ylab = "Hazard"))
legend(x = 15, y = .3,
xpd = TRUE,
inset = c(-0.3,0),
legend = c(0.5, 1, 2, 3, 4, 5, 8, 10),
title = "Time of\n recurrence",
lwd = 2,
bty = "n",
col = mypal(8))
dev.off()
# Reproduces Figure 6a
# standard errors for the hazard
pdf("SEsHaz.pdf", width = 6.5, height = 6)
par(font.main = 1,
cex.main = 1.8, cex.lab = 1.2)
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
which_plot = "SE",
plot_options = list(
cut_extrapolated = TRUE,
tmax = 18.85,
main = "Standard Errors of the baseline hazard",
xlab = "Time of recurrence (years)",
ylab = "Time since recurrence (years)"))
dev.off()
# Reproduces Figure 6b
# standard errors for the log-hazard
pdf("SEsLogHaz.pdf", width = 6.5, height = 6)
par(font.main = 1,
cex.main = 1.8, cex.lab = 1.2,
mar = c(4, 4, 4, 6))
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
which_plot = "SE",
plot_options = list(
loghazard = TRUE,
cut_extrapolated = TRUE,
tmax = 18.85,
main = "Standard Errors of the baseline log-hazard",
xlab = "Time of recurrence (years)",
ylab = "Time since recurrence (years)"))
dev.off()
pdf("SurvivalCrossSections.pdf", width = 8, height = 6)
par(font.main = 1,
cex.main = 1.8, cex.lab = 1.2,
mar = c(4, 4, 4, 6))
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
which_plot = "survival",
where_slices = c(0.5, 1, 2, 3, 4, 5, 8, 10),
direction = "u",
plot_options = list(col_palette = mypal,
cut_extrapolated = TRUE,
tmax = 18.85,
surv_slices = TRUE,
main = "Cross-sections of the survival",
xlab = "Time since recurrence",
ylab = "Survival probability"))
legend(x = 15, y = .8,
xpd = T,
inset = c(-0.3,0),
legend = c(0.5, 1, 2, 3, 4, 5, 8, 10),
title = "Time of\n recurrence",
lwd = 2,
bty = "n",
col = mypal(8))
dev.off()
pdf("CumhazCrossSections.pdf", width = 8, height = 6)
par(font.main = 1,
cex.main = 1.8, cex.lab = 1.2,
mar = c(4, 4, 4, 6))
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
which_plot = "cumhaz",
where_slices = c(0.5, 1, 2, 3, 4, 5, 8, 10),
direction = "u",
plot_options = list(col_palette = mypal,
cut_extrapolated = TRUE,
tmax = 18.85,
cumhaz_slices = TRUE,
main = "Cross-sections of the cumulative hazard",
xlab = "Time since recurrence",
ylab = "Cumulative hazard"))
legend(x = 15, y = 1.5,
xpd = T,
inset = c(-0.3,0),
legend = c(0.5, 1, 2, 3, 4, 5, 8, 10),
title = "Time of\n recurrence",
lwd = 2,
bty = "n",
col = mypal(8))
dev.off()
pdf("SEsLogHaz.pdf", width = 6.5, height = 6)
par(font.main = 1,
cex.main = 1.8, cex.lab = 1.2)
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
which_plot = "SE",
plot_options = list(
loghazard = TRUE,
cut_extrapolated = TRUE,
tmax = 18.85,
main = "Standard Errors of the baseline log-hazard",
xlab = "Time of recurrence (years)",
ylab = "Time since recurrence (years)"))
dev.off()
setwd("C:/Cloud/PhD project/Tex files/Paper4")
pdf("CumhazCrossSections.pdf", width = 8, height = 6)
par(font.main = 1,
cex.main = 1.8, cex.lab = 1.2,
mar = c(4, 4, 4, 6))
plot(mod_reccov,
plot_grid = list(c(umin = 0, umax = 15, du = .1),
c(smin = 0, smax = 14.2, du = .1)),
which_plot = "cumhaz",
where_slices = c(0.5, 1, 2, 3, 4, 5, 8, 10),
direction = "u",
plot_options = list(col_palette = mypal,
cut_extrapolated = TRUE,
tmax = 18.85,
cumhaz_slices = TRUE,
main = "Cross-sections of the cumulative hazard",
xlab = "Time since recurrence",
ylab = "Cumulative hazard"))
legend(x = 15, y = 1.4,
xpd = T,
inset = c(-0.3,0),
legend = c(0.5, 1, 2, 3, 4, 5, 8, 10),
title = "Time of\n recurrence",
lwd = 2,
bty = "n",
col = mypal(8))
dev.off()
id <- 1:20
u <- c(5.43, 3.25, 8.15, 5.53, 7.28, 6.61, 5.91, 4.94, 4.25, 3.86, 4.05, 6.86,
4.94, 4.46, 2.14, 7.56, 5.55, 7.60, 6.46, 4.96)
s <- c(0.44, 4.89, 0.92, 1.81, 2.02, 1.55, 3.16, 6.36, 0.66, 2.02, 1.22, 3.96,
7.07, 2.91, 3.38, 2.36, 1.74, 0.06, 5.76, 3.00)
ev <- c(1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1)#'
fakedata <- as.data.frame(cbind(id, u, s, ev))
fakedata2ts <- prepare_data(u = fakedata$u,
s_out = fakedata$s,
ev = fakedata$ev,
ds = .5)
devtools::load_all(".")
id <- 1:20
u <- c(5.43, 3.25, 8.15, 5.53, 7.28, 6.61, 5.91, 4.94, 4.25, 3.86, 4.05, 6.86,
4.94, 4.46, 2.14, 7.56, 5.55, 7.60, 6.46, 4.96)
s <- c(0.44, 4.89, 0.92, 1.81, 2.02, 1.55, 3.16, 6.36, 0.66, 2.02, 1.22, 3.96,
7.07, 2.91, 3.38, 2.36, 1.74, 0.06, 5.76, 3.00)
ev <- c(1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1)#'
fakedata <- as.data.frame(cbind(id, u, s, ev))
fakedata2ts <- prepare_data(u = fakedata$u,
s_out = fakedata$s,
ev = fakedata$ev,
ds = .5)
# Fit a fake model - not optimal smoothing
fakemod <- fit2ts(fakedata2ts,
optim_method = "grid_search",
lrho = list(seq(1 ,1.5 ,.5),
seq(1 ,1.5 ,.5)))
# plot the hazard surface
plot(fakemod)
plot(fakemod,
which_plot = "survival")
plot(fakemod,
which_plot = "survival",
plot_options = list(
original = TRUE
))
plot(fakemod,
which_plot = "survival",
where_slices = c(2, 4, 6, 8)
plot_options = list(
plot(fakemod,
which_plot = "survival",
where_slices = c(2, 4, 6, 8),
plot_options = list(
surv_slices = TRUE
))
plot(fakemod,
which_plot = "survival",
where_slices = c(4, 6, 8),
plot_options = list(
surv_slices = TRUE
))
plot(fakemod,
which_plot = "survival",
direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
surv_slices = TRUE
))
devtools::run_examples()
devtools::run_examples()
<<<<<<< HEAD
devtools::load_all(".")
id <- 1:20
u <- c(5.43, 3.25, 8.15, 5.53, 7.28, 6.61, 5.91, 4.94, 4.25, 3.86, 4.05, 6.86,
4.94, 4.46, 2.14, 7.56, 5.55, 7.60, 6.46, 4.96)
s <- c(0.44, 4.89, 0.92, 1.81, 2.02, 1.55, 3.16, 6.36, 0.66, 2.02, 1.22, 3.96,
7.07, 2.91, 3.38, 2.36, 1.74, 0.06, 5.76, 3.00)
ev <- c(1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1)#'
fakedata <- as.data.frame(cbind(id, u, s, ev))
fakedata2ts <- prepare_data(u = fakedata$u,
s_out = fakedata$s,
ev = fakedata$ev,
ds = .5)
# Fit a fake model - not optimal smoothing
fakemod <- fit2ts(fakedata2ts,
optim_method = "LMMsolver")
# Get hazard
get_hazard_2d_LMM(fakemod)
devtools::load_all(".")
id <- 1:20
u <- c(5.43, 3.25, 8.15, 5.53, 7.28, 6.61, 5.91, 4.94, 4.25, 3.86, 4.05, 6.86,
4.94, 4.46, 2.14, 7.56, 5.55, 7.60, 6.46, 4.96)
s <- c(0.44, 4.89, 0.92, 1.81, 2.02, 1.55, 3.16, 6.36, 0.66, 2.02, 1.22, 3.96,
7.07, 2.91, 3.38, 2.36, 1.74, 0.06, 5.76, 3.00)
ev <- c(1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1)#'
fakedata <- as.data.frame(cbind(id, u, s, ev))
fakedata2ts <- prepare_data(u = fakedata$u,
s_out = fakedata$s,
ev = fakedata$ev,
ds = .5)
# Fit a fake model - not optimal smoothing
fakemod <- fit2ts(fakedata2ts,
optim_method = "LMMsolver")
# Get hazard
get_hazard_2d_LMM(fakemod)
View(fakemod)
plot(fakemod)
devtools::load_all(".")
plot(fakemod)
styler:::style_active_file()
devtools::load_all(".")
# Get hazard
get_hazard_2d_LMM(fakemod)
devtools::load_all(".")
# Get hazard
get_hazard_2d_LMM(fakemod)
plot(fakemod)
get_hazard_2d_LMM(fakemod,
plot_grid = list(c(umin = 3, umax = 8.5, du = .1)),
c(smin = 0, smax = 7.1, ds = .1))
get_hazard_2d_LMM(fakemod,
plot_grid = list(c(umin = 3, umax = 8.5, du = .1),
c(smin = 0, smax = 7.1, ds = .1)))
plot(fakemod,
plot_options = list(
original = TRUE
))
devtools::load_all(".")
plot(fakemod)
devtools::load_all(".")
plot(fakemod)
devtools::load_all(".")
plot(fakemod)
plot(fakemod,
which_plot = "survival",
direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
surv_slices = TRUE
))
devtools::load_all(".")
plot(fakemod,
which_plot = "survival",
direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
surv_slices = TRUE
))
devtools::load_all(".")
plot(fakemod,
which_plot = "survival",
direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
surv_slices = TRUE
))
devtools::load_all(".")
plot(fakemod,
which_plot = "survival",
direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
surv_slices = TRUE
))
plot(fakemod,
which_plot = "cumhaz",
direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
cumhaz_slices = TRUE
))
plot(fakemod,
which_plot = "cumhaz",
direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
#cumhaz_slices = TRUE
))
plot(fakemod,
which_plot = "cumhaz",
direction = "u",
#where_slices = c(4, 6, 8),
plot_options = list(
cumhaz_slices = TRUE
))
plot(fakemod,
which_plot = "cumhaz",
#direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
cumhaz_slices = TRUE
))
devtools::load_all(".")
plot(fakemod,
which_plot = "cumhaz",
#direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
cumhaz_slices = TRUE
))
devtools::load_all(".")
plot(fakemod,
which_plot = "cumhaz",
#direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
cumhaz_slices = TRUE
))
where_slices = c(4, 6, 8)
direction = NULL
(!is.null(where_slices)) & is.null(direction)
devtools::load_all(".")
plot(fakemod,
which_plot = "cumhaz",
#direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
cumhaz_slices = TRUE
))
plot(fakemod,
which_plot = "cumhaz",
#direction = "u",
where_slices = c(4, 6, 8),
plot_options = list(
cumhaz_slices = TRUE
))
devtools::load_all(".")
id <- 1:20
u <- c(5.43, 3.25, 8.15, 5.53, 7.28, 6.61, 5.91, 4.94, 4.25, 3.86, 4.05, 6.86,
4.94, 4.46, 2.14, 7.56, 5.55, 7.60, 6.46, 4.96)
s <- c(0.44, 4.89, 0.92, 1.81, 2.02, 1.55, 3.16, 6.36, 0.66, 2.02, 1.22, 3.96,
7.07, 2.91, 3.38, 2.36, 1.74, 0.06, 5.76, 3.00)
ev <- c(1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1)
x1 <- c(0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0)
fakedata <- as.data.frame(cbind(id, u, s, ev, x1))
fakedata2ts <- prepare_data(data = fakedata,
u = "u",
s_out = "s",
ev = "ev",
ds = .5,
individual = TRUE,
covs = "x1")
# Fit a fake model - not optimal smoothing
fakemod <- fit2ts(fakedata2ts,
optim_method = "grid_search",
lrho = list(seq(1, 1.5, .5),
seq(1, 1.5, .5)))
get_hr(fakemod)
devtools::load_all(".")
get_hr(fakemod)
library(TwoTimeScales)
dt2ts_cov <- prepare_data(data = reccolon2ts,
u = "timer",
s_in = "entrys",
s_out = "timesr",
events = "status",
ds = 30,
individual = TRUE,
covs = c("rx", "node4", "sex"))
str(dt2ts_cov)
print(dt2ts_cov)
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
dt1ts <- prepare_data(data = reccolon2ts,
s_in = "entrys",
s_out = "timesr",
events = "status",
ds = 180)
## fitting the model with fit1ts() - default options
mod1 <- fit1ts(dt1ts)
mod1 <- fit1ts(dt1ts,
optim_method = "LMMsolver")
=======
>>>>>>> 010be51fbd23b8af4600244358342ecddf1439c4
